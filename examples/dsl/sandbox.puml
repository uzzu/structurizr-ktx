@startuml(id=Container)
!include <C4/C4>
!include <C4/C4_Context>
!include <C4/C4_Container>
!include <C4/C4_Component>
title Customer Information System - Containers

top to bottom direction
System_Boundary(2, "Customer Information System") {
  Container(11, "Message Bus", "RabbitMQ", "Transport for business events.")
  Container(3, "Customer Application", "Java and Spring Boot", "Allows customers to manage their profile.")
  Container(4, "Customer Service", "Java and Spring Boot", "The point of access for customer information.")
  ContainerDb(6, "Customer Database", "Oracle 12c", "Stores customer information.")
  Container(7, "Reporting Service", "Ruby", "Creates normalised data for reporting purposes.")
  ContainerDb(8, "reporting database", "MySQL", "Stores a normalised version of all business data for ad hoc reporting purposes.")
  Container(9, "Audit Service", "C# .NET", "Provides organisation-wide auditing facilities.")
  Container(10, "Audit Store", "Event Store", "Stores information about events that have happened.")
}
Rel(11, 9, "Sends customer update events to")
Rel(11, 7, "Sends customer update events to")
Rel(4, 3, "Sends events to", "WebSocket")
Rel(4, 6, "Stores data in", "JDBC")
Rel(4, 11, "Sends customer update events to")
Rel(3, 4, "Updates customer information using", "JSON/HTTPS")
Rel(9, 10, "Stores events in")
Rel(7, 8, "Stores data in")
@enduml
@startuml(id=Customers_Request)
!include <C4/C4>
!include <C4/C4_Context>
!include <C4/C4_Container>
!include <C4/C4_Component>
title Customer Information System - Customer Service - Components

top to bottom direction
ContainerDb(6, "Customer Database", "Oracle 12c", "Stores customer information.")
Container_Boundary(4, "Customer Service") {
  Component(5, "CustomerHandler", "ApiController", "The handler for /cutomers request")
}
Rel(5, 6, "Stores data in", "JDBC")
@enduml
@startuml(id=CustomerUpdateEvent)
!include <C4/C4>
!include <C4/C4_Context>
!include <C4/C4_Container>
!include <C4/C4_Component>
title Customer Information System - Dynamic
caption This diagram shows what happens when a customer updates their details.

hide stereotype
actor "Customer" as 1 <<Person>>
participant "Customer Application" as 3 <<Container: Java and Spring Boot>>
participant "Customer Service" as 4 <<Container: Java and Spring Boot>>
participant "Customer Database" as 6 <<Container: Oracle 12c>>
participant "Message Bus" as 11 <<Container: RabbitMQ>>
participant "Audit Service" as 9 <<Container: C# .NET>>
participant "Reporting Service" as 7 <<Container: Ruby>>
participant "Audit Store" as 10 <<Container: Event Store>>
participant "reporting database" as 8 <<Container: MySQL>>
1 -> 3 : 1. 
3 -> 4 : 2. 
4 -> 6 : 3. 
4 -> 11 : 4. 
4 -> 3 : 5. Confirms update to
11 -> 9 : 5. 
11 -> 7 : 5. 
9 -> 10 : 6. 
7 -> 8 : 6. 
@enduml
